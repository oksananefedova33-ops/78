(function(){
    'use strict';
    
    let settings = {
        chatId: '',
        botToken: '',
        notifications: {
            visits: false,
            downloads: false,
            links: false
        }
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ —Ç—É–ª–±–∞—Ä
    function addNotifyButton() {
        const toolbar = document.querySelector('.topbar');
        if (!toolbar || document.getElementById('btnTgNotify')) return;
        
        const btn = document.createElement('button');
        btn.type = 'button';
        btn.id = 'btnTgNotify';
        btn.className = 'btn'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª–∞—Å—Å btn
        btn.textContent = 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
        btn.addEventListener('click', openNotifyModal);
        
        const exportBtn = toolbar.querySelector('#btnExport');
        if (exportBtn) {
            exportBtn.parentNode.insertBefore(btn, exportBtn.nextSibling);
        } else {
            toolbar.appendChild(btn);
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    function createModal() {
        if (document.getElementById('tgModalBackdrop')) return;
        
        const backdrop = document.createElement('div');
        backdrop.id = 'tgModalBackdrop';
        backdrop.className = 'tg-backdrop hidden';
        
        const modal = document.createElement('div');
        modal.className = 'tg-modal';
        
        modal.innerHTML = `
            <div class="tg-modal__header">
                <div class="tg-modal__title">üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram</div>
                <button type="button" class="tg-close">√ó</button>
            </div>
            <div class="tg-modal__body">
                <div class="tg-section">
                    <label class="tg-label">ID —á–∞—Ç–∞ Telegram:</label>
                    <input type="text" class="tg-input" id="tgChatId" placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890">
                    <div class="tg-checkbox-desc">–ü–æ–ª—É—á–∏—Ç–µ ID —á–∞—Ç–∞ —É –±–æ—Ç–∞ @userinfobot</div>
                </div>
                
                <div class="tg-section">
                    <label class="tg-label">–¢–æ–∫–µ–Ω –±–æ—Ç–∞:</label>
                    <input type="password" class="tg-input" id="tgBotToken" placeholder="123456789:ABCdefGHIjklMNOpqrsTUVwxyz">
                    <div class="tg-checkbox-desc">–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather</div>
                </div>
                
                <div class="tg-section">
                    <label class="tg-label">–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</label>
                    <div class="tg-checkbox-group">
                        <label class="tg-checkbox-item">
                            <input type="checkbox" class="tg-checkbox" id="tgNotifyVisits">
                            <span class="tg-checkbox-label">üìä –ü–æ—Å–µ—â–µ–Ω–∏–µ —Å–∞–π—Ç–∞</span>
                        </label>
                        <div class="tg-checkbox-desc">–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫–∞–∂–¥–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–∏ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</div>
                        
                        <label class="tg-checkbox-item">
                            <input type="checkbox" class="tg-checkbox" id="tgNotifyDownloads">
                            <span class="tg-checkbox-label">üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞</span>
                        </label>
                        <div class="tg-checkbox-desc">–ö–æ–≥–¥–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É-—Ñ–∞–π–ª</div>
                        
                        <label class="tg-checkbox-item">
                            <input type="checkbox" class="tg-checkbox" id="tgNotifyLinks">
                            <span class="tg-checkbox-label">üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ</span>
                        </label>
                        <div class="tg-checkbox-desc">–ö–æ–≥–¥–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É-—Å—Å—ã–ª–∫—É</div>
                    </div>
                </div>
                
                <div class="tg-section">
                    <div class="tg-buttons">
                        <button type="button" class="tg-btn primary" id="tgSaveSettings">üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                        <button type="button" class="tg-btn" id="tgTestNotify">üöÄ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</button>
                        <button type="button" class="tg-btn danger" id="tgDeleteSettings">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</button>
                    </div>
                    <div id="tgStatus"></div>
                </div>
            </div>
        `;
        
        backdrop.appendChild(modal);
        document.body.appendChild(backdrop);
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        modal.querySelector('.tg-close').addEventListener('click', closeModal);
        backdrop.addEventListener('click', (e) => {
            if (e.target === backdrop) closeModal();
        });
        
        document.getElementById('tgSaveSettings').addEventListener('click', saveSettings);
        document.getElementById('tgTestNotify').addEventListener('click', testNotification);
        document.getElementById('tgDeleteSettings').addEventListener('click', deleteSettings);
    }
    
    function openNotifyModal() {
        createModal();
        loadSettings();
        document.getElementById('tgModalBackdrop').classList.remove('hidden');
    }
    
    function closeModal() {
        document.getElementById('tgModalBackdrop').classList.add('hidden');
    }
    
    function showStatus(message, type = 'success') {
        const status = document.getElementById('tgStatus');
        status.className = 'tg-status ' + type;
        status.textContent = message;
        setTimeout(() => {
            status.textContent = '';
            status.className = '';
        }, 3000);
    }
    
    async function loadSettings() {
        try {
            const response = await fetch('/editor/tg_notify_api.php?action=getSettings');
            const data = await response.json();
            
            if (data.ok && data.settings) {
                document.getElementById('tgChatId').value = data.settings.chat_id || '';
                document.getElementById('tgBotToken').value = data.settings.bot_token || '';
                document.getElementById('tgNotifyVisits').checked = data.settings.notify_visits === '1';
                document.getElementById('tgNotifyDownloads').checked = data.settings.notify_downloads === '1';
                document.getElementById('tgNotifyLinks').checked = data.settings.notify_links === '1';
            }
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'error');
        }
    }
    
    async function saveSettings() {
        const chatId = document.getElementById('tgChatId').value.trim();
        const botToken = document.getElementById('tgBotToken').value.trim();
        
        if (!chatId || !botToken) {
            showStatus('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ ID —á–∞—Ç–∞ –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞', 'error');
            return;
        }
        
        const fd = new FormData();
        fd.append('action', 'saveSettings');
        fd.append('chat_id', chatId);
        fd.append('bot_token', botToken);
        fd.append('notify_visits', document.getElementById('tgNotifyVisits').checked ? '1' : '0');
        fd.append('notify_downloads', document.getElementById('tgNotifyDownloads').checked ? '1' : '0');
        fd.append('notify_links', document.getElementById('tgNotifyLinks').checked ? '1' : '0');
        
        try {
            const response = await fetch('/editor/tg_notify_api.php', {
                method: 'POST',
                body: fd
            });
            const data = await response.json();
            
            if (data.ok) {
                showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
            } else {
                showStatus(data.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', 'error');
            }
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    async function testNotification() {
        try {
            const response = await fetch('/editor/tg_notify_api.php?action=test');
            const data = await response.json();
            
            if (data.ok) {
                showStatus('–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 'success');
            } else {
                showStatus(data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
            }
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    async function deleteSettings() {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π?')) return;
        
        const fd = new FormData();
        fd.append('action', 'deleteSettings');
        
        try {
            const response = await fetch('/editor/tg_notify_api.php', {
                method: 'POST',
                body: fd
            });
            const data = await response.json();
            
            if (data.ok) {
                showStatus('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–¥–∞–ª–µ–Ω—ã', 'success');
                document.getElementById('tgChatId').value = '';
                document.getElementById('tgBotToken').value = '';
                document.getElementById('tgNotifyVisits').checked = false;
                document.getElementById('tgNotifyDownloads').checked = false;
                document.getElementById('tgNotifyLinks').checked = false;
            }
        } catch (error) {
            showStatus('–û—à–∏–±–∫–∞: ' + error.message, 'error');
        }
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    document.addEventListener('DOMContentLoaded', function() {
        addNotifyButton();
    });
})();